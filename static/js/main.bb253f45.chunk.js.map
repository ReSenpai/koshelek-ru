{"version":3,"sources":["components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/common/Preloader/Preloader.tsx","hoc/withSuspense.js","redux/exchange_selectors.ts","api/api.ts","redux/exchange_reducer.ts","App.tsx","serviceWorker.js","redux/store.ts","index.tsx"],"names":["Header","Breadcrumbs","aria-label","to","Link","color","HeaderContainer","Preloader","template","preloader","Wrapper","Container","animation","keyframes","styled","div","props","withSuspense","Component","fallback","getInitially","state","exchangePage","initially","binance","axios","create","baseURL","binanceAPI","get","then","response","data","initialState","exchangeReducer","action","type","payload","TableContainer","lazy","RunningLineContainer","connect","testAPI","dispatch","a","console","log","useEffect","exact","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uQAWA,IAceA,EAdA,WACX,OACI,kBAACC,EAAA,EAAD,CAAaC,aAAW,cACpB,kBAAC,IAAD,CAASC,GAAG,UACR,kBAACC,EAAA,EAAD,CAAMC,MAAM,WAAZ,WAEJ,kBAAC,IAAD,CAASF,GAAG,iBACR,kBAACC,EAAA,EAAD,CAAMC,MAAM,WAAZ,oBCTDC,EANS,WACpB,OACI,kBAAC,EAAD,O,k6BCIR,IAoBeC,EApBwB,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,SAAiC,IAAvBH,aAAuB,MAAf,UAAe,EAEhEI,EAAY,kBAACC,EAAD,CAASL,MAAQA,GAAQ,8BAAW,+BAEtD,OAAQG,GACJ,IAJgB,cAKZ,OACI,kBAACG,EAAD,KACMF,GAId,QACI,OACIA,IASVG,EAAYC,YAAH,KAiBTH,EAAUI,IAAOC,IAAV,KAOgB,SAAAC,GAAK,OAAIA,EAAMX,QAGtBO,GAOhBD,EAAYG,IAAOC,IAAV,KC/DFE,EAAe,SAACC,GAEzB,OAAO,SAACF,GAAD,OACH,kBAAC,WAAD,CAAUG,SAAW,kBAAC,EAAD,CAAWX,SAAS,iBACrC,kBAACU,EAAcF,MCLdI,EAAe,SAACC,GAAD,OAAyBA,EAAMC,aAAaC,W,yCCAlEC,E,OAAUC,EAAMC,OAAO,CAEzBC,QAAS,4BAQAC,EAAa,WAElB,OAAOJ,EAAQK,IAAR,iBACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCR/BC,EAAe,CACfV,WAAW,GAsDAW,EAlDS,WAA0D,IAAzDb,EAAwD,uDAAhDY,EAAcE,EAAkC,uCAE7E,OAAQA,EAAOC,MACX,IAXc,qBAYV,OAAO,eACAf,EADP,GAEOc,EAAOE,SAGlB,QACI,OAAOhB,ICbbiB,EAAiBC,gBAAK,kBAAM,iCAC5BC,EAAuBD,gBAAK,kBAAM,iCAqCzBE,eALS,SAACpB,GAAD,MAA6C,CACnEE,UAAWH,EAAaC,MAImF,CAC3GqB,QDOqB,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEACFhB,IADE,OACnBG,EADmB,OAEzBc,QAAQC,IAAIf,GAFa,2CAAN,wDCRRU,EAzBkB,SAACzB,GAMhC,OAJA+B,qBAAU,WACR/B,EAAM0B,YACL,CAAC1B,EAAMO,YAGR,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIC,OAAS,kBAAM,kBAAC,IAAD,CAAU/C,GAAI,cAEnD,kBAAC,IAAD,CAAO8C,KAAK,SAASC,OAASjC,EAAaqB,KAE3C,kBAAC,IAAD,CAAOW,KAAK,gBAAgBC,OAASjC,EAAauB,UCxBtCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCbAC,EAAcC,YAAgB,CACjCnC,aAAcY,IAQFwB,EAFDC,YAAYH,EAAaI,YAAgBC,M,MCFvDC,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAQA,GAChB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.bb253f45.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction handleClick(event: any) {\r\n  event.preventDefault();\r\n  console.info('You clicked a breadcrumb.');\r\n}\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n            <NavLink to='/table'>\r\n                <Link color=\"inherit\">Table </Link> \r\n            </NavLink>\r\n            <NavLink to='/running-line'>\r\n                <Link color=\"inherit\">Running Line </Link> \r\n            </NavLink>\r\n            {/* <Typography color=\"textPrimary\">Breadcrumb</Typography> */}\r\n        </Breadcrumbs>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\n\r\nconst HeaderContainer = () => {\r\n    return (\r\n        <Header />\r\n    );\r\n}\r\n\r\nexport default HeaderContainer;","import { keyframes } from 'styled-components';\r\nimport styled from 'styled-components';\r\nimport React from 'react';\r\n\r\ntype PropsType = {\r\n    template?: string,\r\n    color?: string\r\n}\r\n\r\nconst Preloader: React.FC<PropsType> = ({template, color = '#383333'}) => {\r\n    const FULL_SCREEN = 'FULL_SCREEN';\r\n    const preloader = <Wrapper color={ color }><div></div><div></div></Wrapper>;\r\n\r\n    switch (template) {\r\n        case FULL_SCREEN: {\r\n            return (\r\n                <Container>\r\n                    { preloader }\r\n                </Container>\r\n            )\r\n        }\r\n        default: {\r\n            return (\r\n                preloader\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n\r\n\r\nconst animation = keyframes `\r\n    0% {\r\n        top: 72px;\r\n        left: 72px;\r\n        width: 0;\r\n        height: 0;\r\n        opacity: 1;\r\n        }\r\n    100% {\r\n        top: 0px;\r\n        left: 0px;\r\n        width: 144px;\r\n        height: 144px;\r\n        opacity: 0;\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div `\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 144px;\r\n    height: 144px;\r\n    & div {\r\n        position: absolute;\r\n        border: 4px solid ${ props => props.color };\r\n        opacity: 1;\r\n        border-radius: 50%;\r\n        animation: ${ animation } 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\r\n    }\r\n    & div:nth-child(2) {\r\n        animation-delay: -0.5s;\r\n    }\r\n\r\n`\r\nconst Container = styled.div `\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`","import React, { Suspense } from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n    return (props) => (\r\n        <Suspense fallback={ <Preloader template='FULL_SCREEN' /> }>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    )\r\n}","import { AppStateType } from \"./store\";\r\n\r\nexport const getInitially = (state: AppStateType) => state.exchangePage.initially;","import axios from 'axios';\r\n\r\nconst binance = axios.create({\r\n    // withCredentials: true,\r\n    baseURL: 'https://api.binance.com',\r\n    // headers: {\r\n    //     apiKey: 'lMVaebhHxqx5vB9XJN0eIeUQUj5ceCUAu4yefQOyqDiafCulqChseOjZLO4iheof',\r\n    //     secretKey: 'IDrxYp43fDC6BqxxsDDn84pYyNZLsfhqEOBkPwObSFzOuNpFURiVITvhPpt2zCuZ',\r\n    //     \"proxy\": \"http://localhost:3000\",\r\n    // }\r\n});\r\n\r\nexport const binanceAPI = {\r\n    ping () {\r\n        return binance.get(`/api/v3/depth`)\r\n        .then(response => response.data);\r\n    }\r\n}","import { AppStateType } from \"./store\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { binanceAPI } from \"../api/api\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\nconst SET_CAPTCHA = 'auth/SET_CAPTCHA';\r\n\r\nlet initialState = {\r\n    initially: true as boolean\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst exchangeReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }  \r\n}\r\n\r\n// type ActionsTypes = SetAuthUserDataActionType | SetCaptchaActionType;\r\n\r\n// type SetAuthUserDataActionPayloadType = {\r\n//     userId: number | null\r\n//     email: string | null\r\n//     login: string | null\r\n//     isAuth: boolean\r\n// }\r\n// type SetAuthUserDataActionType = {\r\n//     type: typeof SET_USER_DATA\r\n//     payload: SetAuthUserDataActionPayloadType\r\n// }\r\n// export const setAuthUserData = ( \r\n//     userId: number | null, email: string | null, login: string | null, isAuth: boolean \r\n// ): SetAuthUserDataActionType => ({ \r\n//     type: SET_USER_DATA, \r\n//     payload: { userId, email, login, isAuth } \r\n// });\r\n\r\n// type SetCaptchaActionType = {\r\n//     type: typeof SET_CAPTCHA\r\n//     captcha: string\r\n// }\r\n// export const setCaptcha = (captcha: string): SetCaptchaActionType => ({ type: SET_CAPTCHA, captcha});\r\n\r\n\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n\r\n\r\nexport const testAPI = () => async (dispatch: any) => {\r\n    const response = await binanceAPI.ping();\r\n    console.log(response);\r\n}\r\n\r\n\r\n\r\nexport default exchangeReducer;","import React, { lazy, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport { withSuspense } from './hoc/withSuspense';\nimport { getInitially } from './redux/exchange_selectors';\nimport { AppStateType } from './redux/store';\nimport { testAPI } from './redux/exchange_reducer';\n\nconst TableContainer = lazy(() => import('./components/Table/TableContainer'));\nconst RunningLineContainer = lazy(() => import('./components/RunningLine/RunningLineContainer'));\n\ntype MapStatePropsType = {\n  initially: boolean\n}\ntype MapDispatchPropsType = {\n  testAPI: () => void\n}\ntype OwnPropsType = {\n}\nexport type PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\n\nconst App: React.FC<PropsType> = (props) => {\n\n  useEffect(() =>{\n    props.testAPI();\n  }, [props.initially])\n\n  return (\n    <HashRouter>\n      <HeaderContainer />\n      <Switch>\n        <Route exact path='/' render={ () => <Redirect to={'/table'} />} />\n\n        <Route path='/table' render={ withSuspense(TableContainer)} />\n\n        <Route path='/running-line' render={ withSuspense(RunningLineContainer)} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  initially: getInitially(state)\n}) \n\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, { \n  testAPI\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport exchangeReducer from \"./exchange_reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n   exchangePage: exchangeReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport 'fontsource-roboto';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}