{"version":3,"sources":["redux/exchange_selectors.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/common/Preloader/Preloader.tsx","hoc/withSuspense.js","helpers/objectHelpers.ts","api/api.ts","redux/exchange_reducer.ts","App.tsx","serviceWorker.js","redux/store.ts","index.tsx"],"names":["getInitially","state","exchangePage","initially","getBids","bids","getAsks","asks","Header","Breadcrumbs","aria-label","to","Link","color","HeaderContainer","Preloader","template","preloader","Wrapper","Container","animation","keyframes","styled","div","props","withSuspense","Component","fallback","counter","depthMapToTable","array","map","arr","amount","price","total","toFixed","id","cleanDepthArr","filter","binance","axios","create","baseURL","binanceAPI","symbol","get","then","response","data","ws","WebSocket","config","toLowerCase","onopen","e","console","log","send","JSON","stringify","onclose","event","wasClean","code","reason","onerror","error","message","SET_BIDS","SET_ASKS","initialState","updateBidsData","type","updateAsksData","exchangeReducer","action","slice","length","TableContainer","lazy","RunningLineContainer","connect","getDepth","dispatch","a","onmessage","streamObj","parse","u","lastUpdateId","b","useEffect","exact","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.53fb9e98.chunk.js","sourcesContent":["import { AppStateType } from \"./store\";\r\n\r\nexport const getInitially = (state: AppStateType) => state.exchangePage.initially;\r\nexport const getBids = (state: AppStateType) => state.exchangePage.bids;\r\nexport const getAsks = (state: AppStateType) => state.exchangePage.asks;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction handleClick(event: any) {\r\n  event.preventDefault();\r\n  console.info('You clicked a breadcrumb.');\r\n}\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n            <NavLink to='/table'>\r\n                <Link color=\"inherit\">Table </Link> \r\n            </NavLink>\r\n            <NavLink to='/running-line'>\r\n                <Link color=\"inherit\">Running Line </Link> \r\n            </NavLink>\r\n            {/* <Typography color=\"textPrimary\">Breadcrumb</Typography> */}\r\n        </Breadcrumbs>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\n\r\nconst HeaderContainer = () => {\r\n    return (\r\n        <Header />\r\n    );\r\n}\r\n\r\nexport default HeaderContainer;","import { keyframes } from 'styled-components';\r\nimport styled from 'styled-components';\r\nimport React from 'react';\r\n\r\ntype PropsType = {\r\n    template?: string,\r\n    color?: string\r\n}\r\n\r\nconst Preloader: React.FC<PropsType> = ({template, color = '#383333'}) => {\r\n    const FULL_SCREEN = 'FULL_SCREEN';\r\n    const preloader = <Wrapper color={ color }><div></div><div></div></Wrapper>;\r\n\r\n    switch (template) {\r\n        case FULL_SCREEN: {\r\n            return (\r\n                <Container>\r\n                    { preloader }\r\n                </Container>\r\n            )\r\n        }\r\n        default: {\r\n            return (\r\n                preloader\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n\r\n\r\nconst animation = keyframes `\r\n    0% {\r\n        top: 72px;\r\n        left: 72px;\r\n        width: 0;\r\n        height: 0;\r\n        opacity: 1;\r\n        }\r\n    100% {\r\n        top: 0px;\r\n        left: 0px;\r\n        width: 144px;\r\n        height: 144px;\r\n        opacity: 0;\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div `\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 144px;\r\n    height: 144px;\r\n    & div {\r\n        position: absolute;\r\n        border: 4px solid ${ props => props.color };\r\n        opacity: 1;\r\n        border-radius: 50%;\r\n        animation: ${ animation } 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\r\n    }\r\n    & div:nth-child(2) {\r\n        animation-delay: -0.5s;\r\n    }\r\n\r\n`\r\nconst Container = styled.div `\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`","import React, { Suspense } from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n    return (props) => (\r\n        <Suspense fallback={ <Preloader template='FULL_SCREEN' /> }>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    )\r\n}","import { TableType } from './../types/types';\r\n\r\nlet counter = 0;\r\n\r\nexport const depthMapToTable = (array: Array<Array<string>>): Array<TableType> => {\r\n    return array.map(arr => ({\r\n        amount: arr[0],\r\n        price: arr[1],\r\n        total: (+arr[0] * +arr[1]).toFixed(8),\r\n        id: counter++\r\n    }));\r\n}\r\n\r\nexport const cleanDepthArr = (array: Array<Array<string>>): Array<Array<string>> => {\r\n    return array.filter(arr => +arr[1] !== 0);\r\n}","import axios from 'axios';\r\nimport { DepthType } from '../types/types';\r\n\r\nconst binance = axios.create({\r\n    baseURL: 'https://api.binance.com'\r\n});\r\n\r\nexport const binanceAPI = {\r\n    getDepth (symbol: string = 'BTCUSDT') {\r\n        return binance.get<DepthType>(`/api/v3/depth?limit=500&symbol=${symbol}`)\r\n        .then(response => response.data);\r\n    },\r\n    async streamDepth (symbol: string = 'BTCUSDT') {\r\n        const ws = new WebSocket(`wss://stream.binance.com:9443/ws/${symbol}@depth@1000ms`);\r\n        const config = {\r\n            \"method\": \"SUBSCRIBE\",\r\n            \"params\": [\r\n              `${symbol.toLowerCase()}@depth`\r\n            ],\r\n            \"id\": 1\r\n        }\r\n\r\n        ws.onopen  = function(e) {\r\n            console.log(\"[open] Соединение установлено\");\r\n            console.log(\"Отправляем данные на сервер\");\r\n            ws.send(JSON.stringify(config));\r\n        }\r\n        \r\n        ws.onclose = function(event) {\r\n            if (event.wasClean) {\r\n                console.log(`[close] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`);\r\n            } else {\r\n                console.log('[close] Соединение прервано');\r\n            }\r\n        };\r\n        \r\n        ws.onerror = function(error: any) {\r\n            console.log(`[error] ${error.message}`);\r\n        };\r\n\r\n        return ws;\r\n    }\r\n}","import { depthMapToTable, cleanDepthArr } from './../helpers/objectHelpers';\r\nimport { TableType, BidsType, DepthStreamType, AsksType } from './../types/types';\r\nimport { AppStateType } from \"./store\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { binanceAPI } from \"../api/api\";\r\n\r\nconst SET_BIDS = 'exchange/SET_BIDS';\r\nconst SET_ASKS = 'exchange/SET_ASKS';\r\nconst UPDATE_BIDS = 'exchange/UPDATE_BIDS';\r\nconst UPDATE_ASKS = 'exchange/UPDATE_ASKS';\r\n\r\nlet initialState = {\r\n    initially: true as boolean,\r\n    bids: [] as Array<TableType>,\r\n    asks: [] as Array<TableType>\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst exchangeReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_BIDS: {\r\n            return {\r\n                ...state,\r\n                bids: [...depthMapToTable(action.bids)]\r\n            }\r\n        }\r\n        case SET_ASKS: {\r\n            return {\r\n                ...state,\r\n                asks: [...depthMapToTable(action.asks)]\r\n            }\r\n        }\r\n        case UPDATE_BIDS: {\r\n            return {\r\n                ...state,\r\n                bids: [\r\n                    ...depthMapToTable(action.bids), \r\n                    ...state.bids.slice(0, -(action.bids).length)\r\n                ]\r\n            }\r\n        }\r\n        case UPDATE_ASKS: {\r\n            return {\r\n                ...state,\r\n                asks: [\r\n                    ...depthMapToTable(action.asks), \r\n                    ...state.asks.slice(0, -(action.asks).length)\r\n                ]\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }  \r\n}\r\n\r\n// Actions\r\ntype ActionsTypes = SetBidsDataActionType | setAsksDataActionType | UpdateBidsActionType \r\n    | UpdateAsksActionType;\r\ntype SetBidsDataActionType = {\r\n    type: typeof SET_BIDS\r\n    bids: BidsType\r\n}\r\nexport const setBidsData = ( bids: BidsType ): SetBidsDataActionType => ({ \r\n    type: SET_BIDS, \r\n    bids \r\n});\r\ntype setAsksDataActionType = {\r\n    type: typeof SET_ASKS\r\n    asks: AsksType\r\n}\r\nexport const setAsksData = ( asks: AsksType ): setAsksDataActionType => ({ \r\n    type: SET_ASKS, \r\n    asks \r\n});\r\ntype UpdateBidsActionType = {\r\n    type: typeof UPDATE_BIDS\r\n    bids: BidsType\r\n}\r\nexport const updateBidsData = ( bids: BidsType ): UpdateBidsActionType => ({ \r\n    type: UPDATE_BIDS, \r\n    bids \r\n});\r\ntype UpdateAsksActionType = {\r\n    type: typeof UPDATE_ASKS\r\n    asks: AsksType\r\n}\r\nexport const updateAsksData = ( asks: AsksType ): UpdateAsksActionType => ({ \r\n    type: UPDATE_ASKS, \r\n    asks \r\n});\r\n\r\n\r\n// Thunks\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n\r\nexport const getDepth = (symbol: string): ThunkType => async (dispatch) => {\r\n    const ws = await binanceAPI.streamDepth(symbol);\r\n    const response = await binanceAPI.getDepth(symbol);\r\n    dispatch(setBidsData(response.bids));\r\n    dispatch(setAsksData(response.asks));\r\n    \r\n    console.log(response)\r\n    ws.onmessage = function(event) {\r\n        const streamObj: DepthStreamType = JSON.parse(event.data);\r\n        if (streamObj.u && streamObj.u >= response.lastUpdateId) {\r\n            dispatch(updateBidsData(cleanDepthArr(streamObj.b)));\r\n            dispatch(updateAsksData(cleanDepthArr(streamObj.a)));\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport default exchangeReducer;","import React, { lazy, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport { withSuspense } from './hoc/withSuspense';\nimport { getInitially } from './redux/exchange_selectors';\nimport { AppStateType } from './redux/store';\nimport { getDepth } from './redux/exchange_reducer';\n\nconst TableContainer = lazy(() => import('./components/Table/TableContainer'));\nconst RunningLineContainer = lazy(() => import('./components/RunningLine/RunningLineContainer'));\n\ntype MapStatePropsType = {\n  initially: boolean\n}\ntype MapDispatchPropsType = {\n  getDepth: (symbol: string) => void\n}\ntype OwnPropsType = {\n}\nexport type PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\n\nconst App: React.FC<PropsType> = (props) => {\n\n  useEffect(() =>{\n    props.getDepth('ETHBTC');\n  }, [props.initially])\n\n  return (\n    <HashRouter>\n      <HeaderContainer />\n      <Switch>\n        <Route exact path='/' render={ () => <Redirect to={'/table'} />} />\n\n        <Route path='/table' render={ withSuspense(TableContainer)} />\n\n        <Route path='/running-line' render={ withSuspense(RunningLineContainer)} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  initially: getInitially(state)\n}) \n\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, { \n  getDepth\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport exchangeReducer from \"./exchange_reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n   exchangePage: exchangeReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store; // Bringing the store to the global variable\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport 'fontsource-roboto';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}